AWSTemplateFormatVersion: '2010-09-09'
Description: 3-Tier Architecture Deployment for Brinve Web Application

Resources:
  #VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Brinve-VPC
  
  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    properties: 
      Tags:
        - Key: Name 
          Value: Brinve-IGW

  # Attach Internet Gateway to VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  # Subnets
  # Public Subnets
  WebSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties: 
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ""
      Tags:
        - Key: Name
          Value: WebSubnet

  # Private Sunets
  AppSubnet:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select 
        - 1
        - !GetAZs ""
      Tags:
        - Key: Name
          Value: AppSubnet

  DBSubnet:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select 
        - 2
        - !GetAZs ""
      Tags:
        - Key: Name
          Value: DBSubnet

  # Public Route Table to allow public subnets to access the Internet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  # Route for Public Route Table to direct Internet traffic to the Internet Gateway
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  # Associate Public Subnet 1 with the Public Route Table
  WebSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WebSubnet
      RouteTableId: !Ref PublicRouteTable

  # Security Groups
  # Security Group for Web Servers to allow HTTP, HTTPS, and SSH access
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allow HTTP and SSH
      VpcId: !Ref MyVPC
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # Security Group for Application Servers to allow access from Web Servers and Database Servers
  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allow traffic from Load Balancer and MySQL
      VpcId: !Ref MyVPC
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref WebSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  # Security Group for Database Servers to allow MySQL access from Application Servers
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allow MySQL traffic
      VpcId: !Ref MyVPC
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref AppSecurityGroup

  # Launch Template for Web Server instances
  WebServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName: myKey
      SubnetId: !Ref WebSubnet
      ImageId: ami-0c55b159cbfafe1f0
      SecurityGroupIds: 
        - !Ref WebSecurityGroup
      Tags:
        - Key: Name
          Value: WebServer

  # Launch Template for App Server instances
  AppServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName: myKey
      SubnetId: !Ref AppSubnet
      ImageId: ami-0c55b159cbfafe1f0
      SecurityGroupIds: 
        - !Ref AppSecurityGroup
      Tags:
        - Key: Name
          Value: AppServer

  # Launch Template for Database instances
  DatabaseInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t2.micro
      AllocatedStorage: 20
      DBName: MyDatabase
      Engine: MySQL
      MasterUsername: admin
      MasterUserPassword: password
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup

  # Load Balancers
  # WebLoadBalancer
    WebLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: WebLoadBalancer
      Subnets: 
        - !Ref WebSubnet
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref WebSecurityGroup
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Tags:
        - Key: Name
          Value: WebLoadBalancer


  WebLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      AvailabilityZones: 
        Fn::GetAZs: ""
      Listeners:
        - LoadBalancerPort: "80"
          InstancePort: "80"
          Protocol: "HTTP"
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: "3"
        UnhealthyThreshold: "5"
        Interval: "30"
        Timeout: "5"
      Subnets:
        - !Ref WebSubnet
      SecurityGroups:
        - !Ref WebSecurityGroup
      CrossZone: true
      Tags:
        - Key: Name
          Value: WebLoadBalancer

  # AppLoadBalancer
    AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: AppLoadBalancer
      Subnets: 
        - !Ref AppSubnet
      SecurityGroups: 
        - !Ref AppSecurityGroup
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'



  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      AvailabilityZones: 
        Fn::GetAZs: ""
      Listeners:
        - LoadBalancerPort: "80"
          InstancePort: "8080"
          Protocol: "HTTP"
      HealthCheck:
        Target: HTTP:8080/
        HealthyThreshold: "3"
        UnhealthyThreshold: "5"
        Interval: "30"
        Timeout: "5"
      Subnets:
        - !Ref AppSubnet
      SecurityGroups:
        - !Ref AppSecurityGroup
      CrossZone: true
      Tags:
        - Key: Name
          Value: AppLoadBalancer


  # ALB Listeners
    # WebListener
    WebListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebTargetGroup
      LoadBalancerArn: !Ref WebLoadBalancer
      Port: 80
      Protocol: HTTP
  
  # AppListener
  AppListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppTargetGroup
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 80
      Protocol: HTTP


  # ALB Target Groups
  # WebTargetGroup
  WebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: WebTargetGroup
      Port: 80
      Protocol: HTTP
      VpcId: !Ref MyVPC
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 5
      TargetType: instance
      Matcher:
        HttpCode: 200

  #AppTargetGroups
  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: AppTargetGroup
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref MyVPC
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 5
      TargetType: instance
      Matcher:
        HttpCode: 200


Outputs:
  WebLoadBalancerDNSName:
    Description: "Web Load Balancer DNS Name"
    Value: !GetAtt [WebLoadBalancer, DNSName]

  AppLoadBalancerDNSName:
    Description: "App Load Balancer DNS Name"
    Value: !GetAtt [AppLoadBalancer, DNSName]
